name: Build and publish docker images
on:
    push:
        branches: ["main", "gitHubWorkflow"]
        tags: ["v*.*.*"]
    # Remove pull_request event it is just for test purpuses
    pull_request:
        branches: ["main"]

env:
    REGISTRY: ghcr.io
    UV_VERSION: 0.7
    PYTHON_VERSION: 3.12
    JUPYTER_VERSION: "2025-04-14"
    IMAGE_PREFIX: /jupyter
    SERVICES: jupyter

permissions:
    packages: write
    contents: read
    attestations: write
    id-token: write
jobs:
    build:
        name: Build Docker Image
        runs-on: ubuntu-latest
        outputs:
            tags: ${{ steps.meta.outputs.tags }} # list
            labels: ${{ steps.meta.outputs.labels }} # list
        steps:
            - uses: actions/checkout@v4
              with:
                  ref: ${{ github.head_ref || github.ref_name }}
                  submodules: true
            - name: Install the latest version of uv
              uses: astral-sh/setup-uv@v7
              with:
                  python-version: ${{ env.PYTHON_VERSION }}
                  version: ${{ env.UV_VERSION }}
            - name: Check uv.lock
              run: |
                  uv lock -U
                  if [[ git diff origin/main -- uv.lock ]]; then
                    echo "uv.lock is not up to date. Please run 'uv lock' and commit the changes."
                    exit 1
                  fi
            - name: Check for lock file consistency
              run: |
                  uv check-lock
            - uses: docker/setup-buildx-action@v3
            # https://github.com/docker/metadata-action
            - name: Extract Docker metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ github.repository }}${{ env.IMAGE_PREFIX }}
                  #
                  tags: |
                      type=ref,event=branch
                      type=ref,event=tag
                      type=ref,event=pr,prefix=pr-
                  flavor: |
                      latest=auto

            # https://docs.docker.com/build/ci/github-actions/share-image-jobs/
            # https://github.com/docker/build-push-action
            - name: Build and export to Docker
              uses: docker/build-push-action@v6
              with:
                  context: .
                  file: Dockerfile
                  build-args: |
                      UV_VERSION=${{ env.UV_VERSION }}
                      PYTHON_VERSION=${{ env.PYTHON_VERSION }}
                      JUPYTER_VERSION=${{ env.JUPYTER_VERSION }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
                  push: false
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  outputs: type=docker,dest=${{ runner.temp }}/${{ env.SERVICES }}.tar
            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                  name: docker-image
                  path: ${{ runner.temp }}/${{ env.SERVICES }}.tar
    test_and_push_image:
        name: Test Docker Image
        needs: build
        runs-on: ubuntu-latest
        # https://docs.docker.com/build/ci/github-actions/share-image-jobs/
        steps:
            - name: Download artifact
              uses: actions/download-artifact@v4
              with:
                  name: docker-image
                  path: ${{ runner.temp }}
                  pattern: "!*.dockerbuild" # warning at https://github.com/docker/build-push-action?tab=readme-ov-file
            - name: Load and test in Docker container
              run: |
                  docker load -i ${{ runner.temp }}/${{ env.SERVICES }}.tar
                  RAW_TAGS="${{ needs.build.outputs.tags }}"
                  FIRST_TAG=$(echo "$RAW_TAGS" | tr -s '[:space:]' '\n' | grep -v '^$' | head -n 1)
                  docker run --rm "$FIRST_TAG" /bin/bash -c "jupyter execute \$HOME/north_examples/STSExampleWithCustomization/CommandLineDataconverter.ipynb"
            - uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN}}
            - name: Push Docker Image
              run: |
                  RAW_TAGS="${{ needs.build.outputs.tags }}"
                  for TAG in $RAW_TAGS; do
                    echo "Pushing tag: $TAG"
                    docker push "$TAG"
                  done
